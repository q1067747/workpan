<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hebtu.mapper.UserMapper">

    <!--user的映射结果集-->
    <resultMap type="com.hebtu.entity.User" id="UserMap">
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="pwd" column="pwd"  typeHandler="org.apache.ibatis.type.BlobTypeHandler"/>
        <result property="studentId" column="student_id" jdbcType="VARCHAR"/>
        <result property="fileStoreId" column="file_store_id" jdbcType="INTEGER"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="collegeId" column="college_id" jdbcType="INTEGER"/>
        <result property="majorId" column="major_id" jdbcType="INTEGER"/>
        <result property="groupId" column="group_id" jdbcType="INTEGER"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="registerTime" column="register_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--全部字段-->
    <sql id="allColumn">user_id, pwd, student_id, user_name, email, college_id, major_id, group_id, file_store_id, register_time </sql>

    <!--添加语句的字段列表-->
    <sql id="insertColumn">
        <if test="pwd != null">
            pwd,
        </if>
        <if test="studentId != null">
            student_id,
        </if>
        <if test="userName != null and userName != ''">
            user_name,
        </if>
        <if test="email != null and email != ''">
            email,
        </if>
        <if test="collegeId != null">
            college_id,
        </if>
        <if test="majorId != null">
            major_id,
        </if>
        <if test="groupId != null">
            group_id,
        </if>
        <if test="fileStoreId != null">
            file_store_id,
        </if>
        <if test="registerTime != null">
            register_time,
        </if>
    </sql>

    <!--添加语句的值列表-->
    <sql id="insertValue">
        <if test="pwd != null">
            #{pwd},
        </if>
        <if test="studentId != null">
            #{studentId},
        </if>
        <if test="userName != null and userName != ''">
            #{userName},
        </if>
        <if test="email != null and email != ''">
            #{email},
        </if>
        <if test="collegeId != null">
            #{collegeId},
        </if>
        <if test="majorId != null">
            #{majorId},
        </if>
        <if test="groupId != null">
            #{groupId},
        </if>
        <if test="fileStoreId != null">
            #{fileStoreId},
        </if>
        <if test="registerTime != null">
            #{registerTime},
        </if>
    </sql>

    <!--通用对User各个属性的值的非空判断-->
    <sql id="commonsValue">
        <if test="pwd != null">
            pwd = #{pwd},
        </if>
        <if test="studentId != null">
            student_id = #{studentId},
        </if>
        <if test="userName != null and userName != ''">
            user_name = #{userName},
        </if>
        <if test="email != null and email != ''">
            email = #{email},
        </if>
        <if test="collegeId != null">
            college_id = #{collegeId},
        </if>
        <if test="majorId != null">
            major_id = #{majorId},
        </if>
        <if test="groupId != null">
            group_id = #{groupId},
        </if>
        <if test="fileStoreId != null">
            file_store_id = #{fileStoreId},
        </if>
        <if test="registerTime != null">
            register_time = #{registerTime},
        </if>
    </sql>
    
    <!--新增user:哪个字段不为空就添加哪列数据,返回自增主键-->
    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="insertColumn"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="insertValue"/>
        </trim>
    </insert>
   
    <!--删除user:通过主键-->
    <delete id="deleteById">
        delete from user
        <where>
            user_id = #{userId}
        </where>
    </delete>
    
    <!--查询单个user-->
    <select id="queryById" resultMap="UserMap">
        select
        <include refid="allColumn"></include>
        from user
        <where>
            user_id = #{userId}
        </where>
    </select>

    <!--查询单个user-->
    <select id="getUserByStudentId" resultMap="UserMap">
        select
        <include refid="allColumn"></include>
        from user
        <where>
            student_id = #{studentId}
        </where>
    </select>

    <!--查询所有user-->
    <select id="queryAllByLimit" resultMap="UserMap">
        select
        <include refid="allColumn"></include>
        from user
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="UserMap">
        select
          <include refid="allColumn"></include>
        from user
        <trim prefix="where" prefixOverrides="and" suffixOverrides=",">
            <include refid="commonsValue"></include>
        </trim>
    </select>

    <!--通过主键修改数据-->
    <update id="update">
        update user
        <set>
            <include refid="commonsValue"></include>
        </set>
        <where>
            user_id = #{userId}
        </where>
    </update>


</mapper>